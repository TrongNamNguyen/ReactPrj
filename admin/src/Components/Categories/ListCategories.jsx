import React, { useEffect, useState } from "react";
import "./CategoryStyles.css";
import { backend_url } from "../../App";
import { useNavigate } from "react-router-dom";
import { toast } from 'react-toastify';

const ListCategories = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const navigate = useNavigate();

  const fetchCategories = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${backend_url}/categories`);
      const data = await response.json();
      setCategories(data);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching categories:", error);
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch danh m·ª•c");
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  const removeCategory = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?")) {
      return;
    }
    
    try {
      const response = await fetch(`${backend_url}/removecategory`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: id }),
      });
      
      const result = await response.json();
      
      if (result.success) {
        toast.success("Danh m·ª•c ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
        fetchCategories();
      } else {
        toast.error("Kh√¥ng th·ªÉ x√≥a danh m·ª•c: " + (result.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"));
      }
    } catch (error) {
      console.error("Error removing category:", error);
      toast.error("ƒê√£ x·∫£y ra l·ªói khi x√≥a danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  };

  const editCategory = (id) => {
    navigate(`/editcategory/${id}`);
  };

  // L·ªçc danh m·ª•c theo t·ª´ kh√≥a t√¨m ki·∫øm
  const filteredCategories = categories.filter(category => 
    category.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="admin-page">
      <div className="admin-header">
        <h1>Qu·∫£n l√Ω danh m·ª•c</h1>
        <button 
          className="admin-button admin-button-primary"
          onClick={() => navigate('/addcategory')}
        >
          <span>‚ûï</span> Th√™m danh m·ª•c m·ªõi
        </button>
      </div>
      
      <div className="admin-card">
        <div className="admin-filters">
          <div className="admin-search">
            <span className="search-icon">üîç</span>
            <input 
              type="text" 
              placeholder="T√¨m ki·∫øm danh m·ª•c..." 
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        
        {loading ? (
          <div className="admin-loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>
        ) : (
          <>
            {filteredCategories.length === 0 ? (
              <div className="admin-empty">
                <p>Kh√¥ng t√¨m th·∫•y danh m·ª•c n√†o</p>
                {searchTerm && (
                  <button 
                    className="admin-button admin-button-primary"
                    onClick={() => setSearchTerm("")}
                  >
                    X√≥a t√¨m ki·∫øm
                  </button>
                )}
              </div>
            ) : (
              <div className="admin-table-container">
                <table className="admin-table">
                  <thead>
                    <tr>
                      <th>H√¨nh ·∫£nh</th>
                      <th>T√™n danh m·ª•c</th>
                      <th>M√¥ t·∫£</th>
                      <th>Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredCategories.map((category) => (
                      <tr key={category.id}>
                        <td>
                          <img 
                            className="product-thumbnail" 
                            src={category.image ? (backend_url + category.image) : '/placeholder.jpg'} 
                            alt={category.name} 
                          />
                        </td>
                        <td>{category.name}</td>
                        <td>{category.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</td>
                        <td>
                          <div className="admin-table-actions">
                            <button 
                              className="action-button edit-button" 
                              onClick={() => editCategory(category.id)} 
                              title="Ch·ªânh s·ª≠a danh m·ª•c"
                            >
                              ‚úèÔ∏è
                            </button>
                            <button 
                              className="action-button delete-button" 
                              onClick={() => removeCategory(category.id)} 
                              title="X√≥a danh m·ª•c"
                            >
                              üóëÔ∏è
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default ListCategories; 